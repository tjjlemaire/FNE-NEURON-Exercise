import numpy as np
import matplotlib.pyplot as plt


def main():
    """ Script to compute the extranal field, generated by a current source,
    along the direction of an hypothetical fiber and the resulting activating function.
    """
    # Lets consider a point source electrode located at 100 um away from the x axis in the z direction
    electrodeZcoordinate = 100. * 1e-6  # in m

    # Lets define the fiber diameter
    d = 20 * 1e-6  # m

    # Lets define the coordinates of 101 nodes of Ranvier of a fibers positioned
    # over the x axis and centered at x=0
    # Note 1: the distance between two nodes in a myelinated fiber is approximately
    # 100 times the diameter.

    fiberNodesXcoordinate = np.arange(0, 101 * d * 100, d * 100, dtype=float)
    fiberNodesXcoordinate -= fiberNodesXcoordinate[50]

    # TODO
    # Lets now compute the distance between the fiber nodes and the electrode
    # Functions you might need: [square root: np.sqrt(), x power n:  x**n]
    """ ------------------ insert here your code ------------------ """

    # distance = ???

    """ ----------------------------------------------------------- """

    """ Compute and plot the indcued electric field along the direction of the
    fiber and the relative activating function"""

    # case 1
    stimAmplitude = -1.  # in uA
    v = compute_field(distance, stimAmplitude)
    s = compute_activating_function(v)
    # Plot the results
    fig, ax = plt.subplots(2, figsize=(9, 4))
    ax[0].plot(fiberNodesXcoordinate, v)
    ax[0].set_ylabel("External field (mV)")
    ax[1].plot(fiberNodesXcoordinate[1:-1], s)
    ax[1].set_ylabel("Activating function")
    ax[1].set_xlabel("nodes x coordinate")
    plt.show()

    # case 2
    stimAmplitude = 1.  # in uA
    v = compute_field(distance, stimAmplitude)
    s = compute_activating_function(v)
    fig, ax = plt.subplots(2, figsize=(9, 4))
    ax[0].plot(fiberNodesXcoordinate, v)
    ax[0].set_ylabel("External field (mV)")
    ax[1].plot(fiberNodesXcoordinate[1:-1], s)
    ax[1].set_ylabel("Activating function")
    ax[1].set_xlabel("nodes x coordinate")
    plt.show()


def compute_field(distance, amplitude):
    """ This function compute the electric potential generated by a given current source
    at a given distance (or array of distances)
    Keyword arguments:
        distance -- float number or numpy array rapresenting the distance between the source
        and the point/points where we want to compute the field
        amplitude -- stimulation amplitude in uA
    Output:
        v -- the computed potential in mV
    """

    # Grey matter conductivity  in S/m
    sigma = 2.
    # resistivity in ohm*m;
    rho = 1. / sigma

    # TODO add here the equation to compute v (you might need pi: np.pi)
    """ ------------------ insert here your code ------------------ """

    """ ----------------------------------------------------------- """

    return v


def compute_activating_function(ve):
    """ This function compute the activating function given the extarnal field along the fiber
    Keyword arguments:
        ve -- extarnal field along the fiber
    Output:
        s -- the activating function
    """

    # TODO add here the equation to compute S
    """ ------------------ insert here your code ------------------ """

    """ ----------------------------------------------------------- """
    return s


if __name__ == '__main__':
    main()
